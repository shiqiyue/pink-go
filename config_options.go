package client

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import (
	"fmt"
	"github.com/busgo/pink-go/etcd"
	"github.com/busgo/pink-go/log"
)

import "github.com/google/go-cmp/cmp"

type ApplyOptionFunc func(c *config) error

func (f ApplyOptionFunc) apply(c *config) error {
	return f(c)
}

func newConfig(options ...Option) (config, error) {
	var c config
	err := applyConfigOptions(&c, options...)
	return c, err
}

func applyConfigOptions(c *config, options ...Option) error {
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type Option interface {
	apply(*config) error
}

type optionCliImpl struct {
	o *etcd.Cli
}

func (o optionCliImpl) apply(c *config) error {
	c.cli = o.o
	return nil
}

func (o optionCliImpl) Equal(v optionCliImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o optionCliImpl) String() string {
	name := "OptionCli"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func OptionCli(o *etcd.Cli) Option {
	return optionCliImpl{
		o: o,
	}
}

type optionGroupImpl struct {
	o string
}

func (o optionGroupImpl) apply(c *config) error {
	c.group = o.o
	return nil
}

func (o optionGroupImpl) Equal(v optionGroupImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o optionGroupImpl) String() string {
	name := "OptionGroup"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func OptionGroup(o string) Option {
	return optionGroupImpl{
		o: o,
	}
}

type optionLImpl struct {
	o log.Logger
}

func (o optionLImpl) apply(c *config) error {
	c.l = o.o
	return nil
}

func (o optionLImpl) Equal(v optionLImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o optionLImpl) String() string {
	name := "OptionL"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func OptionL(o log.Logger) Option {
	return optionLImpl{
		o: o,
	}
}

type optionIpImpl struct {
	o string
}

func (o optionIpImpl) apply(c *config) error {
	c.ip = o.o
	return nil
}

func (o optionIpImpl) Equal(v optionIpImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o optionIpImpl) String() string {
	name := "OptionIp"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func OptionIp(o string) Option {
	return optionIpImpl{
		o: o,
	}
}

type optionExtensionsImpl struct {
	o []Extension
}

func (o optionExtensionsImpl) apply(c *config) error {
	c.extensions = o.o
	return nil
}

func (o optionExtensionsImpl) Equal(v optionExtensionsImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o optionExtensionsImpl) String() string {
	name := "OptionExtensions"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func OptionExtensions(o []Extension) Option {
	return optionExtensionsImpl{
		o: o,
	}
}
